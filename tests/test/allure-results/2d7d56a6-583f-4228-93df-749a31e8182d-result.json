{"name": "test_sending_form", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 10s, while waiting for:\nbrowser.element(('css selector', 'label[for=\"hobbies-checkbox-2\"]')).click\n\nReason: ElementClickInterceptedException: element click intercepted: Element <label title=\"\" for=\"hobbies-checkbox-2\" class=\"custom-control-label\">...</label> is not clickable at point (870, 829). Other element would receive the click: <div>...</div>\n  (Session info: chrome=128.0.6613.137); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nScreenshot: file://C:\\Users\\Denzel\\.selene\\screenshots\\1761807280700\\1761807280700.png\nPageSource: file://C:\\Users\\Denzel\\.selene\\screenshots\\1761807280700\\1761807280700.html", "trace": "fn = <selene.core.wait.Command object at 0x00000167FEC71270>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n                       ^^^^^^^^^^^^^^^\n\n..\\..\\..\\qa_guru_hw\\.venv\\Lib\\site-packages\\selene\\core\\wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\qa_guru_hw\\.venv\\Lib\\site-packages\\selene\\core\\wait.py:61: in __call__\n    return self._fn(entity)\n           ^^^^^^^^^^^^^^^^\n..\\..\\..\\qa_guru_hw\\.venv\\Lib\\site-packages\\selene\\core\\entity.py:525: in raw_click\n    element.locate().click()\n..\\..\\..\\qa_guru_hw\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:120: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\qa_guru_hw\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:573: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\..\\qa_guru_hw\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000167FEC22900>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x561e70b98013 \\\\u003Cunknown>\\\\n#21 0x561e70ba7ebc \\\\u003Cunknown>\\\\n#22 0x7fe7bdd58ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label title=\"\" for=\"hobbies-checkbox-2\" class=\"custom-control-label\">...</label> is not clickable at point (870, 829). Other element would receive the click: <div>...</div>\nE         (Session info: chrome=128.0.6613.137); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nE       Stacktrace:\nE       #0 0x561e70ba90ca <unknown>\nE       #1 0x561e708752b0 <unknown>\nE       #2 0x561e708cb7e6 <unknown>\nE       #3 0x561e708c96ed <unknown>\nE       #4 0x561e708c7187 <unknown>\nE       #5 0x561e708c602c <unknown>\nE       #6 0x561e708b9946 <unknown>\nE       #7 0x561e708e9902 <unknown>\nE       #8 0x561e708b92f9 <unknown>\nE       #9 0x561e708e9ace <unknown>\nE       #10 0x561e70907e26 <unknown>\nE       #11 0x561e708e96a3 <unknown>\nE       #12 0x561e708b74f3 <unknown>\nE       #13 0x561e708b84fe <unknown>\nE       #14 0x561e70b6fd7b <unknown>\nE       #15 0x561e70b73d31 <unknown>\nE       #16 0x561e70b5bc85 <unknown>\nE       #17 0x561e70b748a2 <unknown>\nE       #18 0x561e70b40e1f <unknown>\nE       #19 0x561e70b97e48 <unknown>\nE       #20 0x561e70b98013 <unknown>\nE       #21 0x561e70ba7ebc <unknown>\nE       #22 0x7fe7bdd58ac3 <unknown>\n\n..\\..\\..\\qa_guru_hw\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\noptions_for_browser = <selene.core._browser.Browser object at 0x00000167FEC2CCD0>\n\n    def test_sending_form(options_for_browser):\n        browser = options_for_browser\n    \n        register_page = RegistrationFormPage(options_for_browser)\n        with allure.step(\"open registration page\"):\n            register_page.open(\"https://demoqa.com/automation-practice-form\")\n        with allure.step(\"filling personal information\"):\n            register_page.fill_name(\"Daniil\")\n            register_page.fill_surname(\"Zhuravlev\")\n            register_page.fill_email(\"butmanovich@yandex.ru\")\n            register_page.fill_number(\"3123131232\")\n            register_page.choose_gender(1)\n            register_page.fill_date_of_birth('2002', 'May', '11')\n        with allure.step(\"filling other info\"):\n            register_page.choose_subject(\"Computer Science\")\n>           register_page.choose_hobby()\n\ntest_registration_form.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nregistration_form.py:41: in choose_hobby\n    self.browser.element('label[for=\"hobbies-checkbox-2\"]').click()\n..\\..\\..\\qa_guru_hw\\.venv\\Lib\\site-packages\\selene\\core\\entity.py:540: in click\n    self.wait.for_(\n..\\..\\..\\qa_guru_hw\\.venv\\Lib\\site-packages\\selene\\core\\wait.py:150: in for_\n    return self._decorator(self)(logic)(fn)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfn = <selene.core.wait.Command object at 0x00000167FEC71270>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=getattr(reason, \"msg\", str(reason)),\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    # TODO: should we have an option to turn on stacktrace logging?\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    # if it's a normal function, it should have __qualname__,\n                    # then use it, otherwise use str(fn)\n                    fn_name = getattr(\n                        fn,\n                        '__qualname__',\n                        getattr(fn, '__str__', lambda: str(fn))(),\n                    )\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn_name}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 10s, while waiting for:\nE                   browser.element(('css selector', 'label[for=\"hobbies-checkbox-2\"]')).click\nE                   \nE                   Reason: ElementClickInterceptedException: element click intercepted: Element <label title=\"\" for=\"hobbies-checkbox-2\" class=\"custom-control-label\">...</label> is not clickable at point (870, 829). Other element would receive the click: <div>...</div>\nE                     (Session info: chrome=128.0.6613.137); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nE                   Screenshot: file://C:\\Users\\Denzel\\.selene\\screenshots\\1761807280700\\1761807280700.png\nE                   PageSource: file://C:\\Users\\Denzel\\.selene\\screenshots\\1761807280700\\1761807280700.html\n\n..\\..\\..\\qa_guru_hw\\.venv\\Lib\\site-packages\\selene\\core\\wait.py:148: TimeoutException"}, "steps": [{"name": "open registration page", "status": "passed", "start": 1761807283795, "stop": 1761807285967}, {"name": "filling personal information", "status": "passed", "start": 1761807285967, "stop": 1761807287703}, {"name": "filling other info", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 10s, while waiting for:\nbrowser.element(('css selector', 'label[for=\"hobbies-checkbox-2\"]')).click\n\nReason: ElementClickInterceptedException: element click intercepted: Element <label title=\"\" for=\"hobbies-checkbox-2\" class=\"custom-control-label\">...</label> is not clickable at point (870, 829). Other element would receive the click: <div>...</div>\n  (Session info: chrome=128.0.6613.137); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nScreenshot: file://C:\\Users\\Denzel\\.selene\\screenshots\\1761807280700\\1761807280700.png\nPageSource: file://C:\\Users\\Denzel\\.selene\\screenshots\\1761807280700\\1761807280700.html\n\n", "trace": "  File \"C:\\Users\\Denzel\\PycharmProjects\\qa_guru_hw_11\\tests\\test\\test_registration_form.py\", line 20, in test_sending_form\n    register_page.choose_hobby()\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\Denzel\\PycharmProjects\\qa_guru_hw_11\\tests\\test\\registration_form.py\", line 41, in choose_hobby\n    self.browser.element('label[for=\"hobbies-checkbox-2\"]').click()\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\Denzel\\PycharmProjects\\qa_guru_hw\\.venv\\Lib\\site-packages\\selene\\core\\entity.py\", line 540, in click\n    self.wait.for_(\n    ~~~~~~~~~~~~~~^\n        command.js.click(xoffset=xoffset, yoffset=yoffset)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    ...<8 lines>...\n        )\n        ^\n    )\n    ^\n  File \"C:\\Users\\Denzel\\PycharmProjects\\qa_guru_hw\\.venv\\Lib\\site-packages\\selene\\core\\wait.py\", line 150, in for_\n    return self._decorator(self)(logic)(fn)\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^\n  File \"C:\\Users\\Denzel\\PycharmProjects\\qa_guru_hw\\.venv\\Lib\\site-packages\\selene\\core\\wait.py\", line 148, in logic\n    raise self._hook_failure(failure)\n"}, "start": 1761807287703, "stop": 1761807299083}], "start": 1761807283795, "stop": 1761807299086, "uuid": "183150a5-7f0c-4a2b-9768-b28063093b5c", "historyId": "c8455db1f3df533219bc5e66a8020f2a", "testCaseId": "c8455db1f3df533219bc5e66a8020f2a", "fullName": "tests.test.test_registration_form#test_sending_form", "labels": [{"name": "parentSuite", "value": "tests.test"}, {"name": "suite", "value": "test_registration_form"}, {"name": "host", "value": "DESKTOP-114R2PQ"}, {"name": "thread", "value": "5004-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test.test_registration_form"}], "titlePath": ["tests", "test", "test_registration_form.py"]}